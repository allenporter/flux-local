# serializer version: 1
# name: test_build_hr[build-hr-cluster10-invalid-paths]
  ''
# ---
# name: test_build_hr[build-hr-cluster3]
  '''
  ---
  # Source: podinfo/templates/redis/config.yaml
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: podinfo-redis
    annotations:
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
  data:
    redis.conf: |
      maxmemory 64mb
      maxmemory-policy allkeys-lru
      save ""
      appendonly no
  ---
  # Source: podinfo/templates/redis/service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: podinfo-redis
    labels:
      app: podinfo-redis
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  spec:
    type: ClusterIP
    selector:
      app: podinfo-redis
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: redis
  ---
  # Source: podinfo/templates/service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: podinfo
    labels:
      helm.sh/chart: podinfo-6.8.0
      app.kubernetes.io/name: podinfo
      app.kubernetes.io/version: "6.8.0"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '2'
      internal.config.kubernetes.io/index: '2'
  spec:
    type: ClusterIP
    ports:
    - port: 9898
      targetPort: http
      protocol: TCP
      name: http
    - port: 9999
      targetPort: grpc
      protocol: TCP
      name: grpc
    selector:
      app.kubernetes.io/name: podinfo
  ---
  # Source: podinfo/templates/deployment.yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: podinfo
    labels:
      helm.sh/chart: podinfo-6.8.0
      app.kubernetes.io/name: podinfo
      app.kubernetes.io/version: "6.8.0"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '3'
      internal.config.kubernetes.io/index: '3'
  spec:
    replicas: 1
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: podinfo
    template:
      metadata:
        labels:
          app.kubernetes.io/name: podinfo
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9898"
      spec:
        terminationGracePeriodSeconds: 30
        containers:
        - name: podinfo
          image: "ghcr.io/stefanprodan/podinfo:6.8.0"
          imagePullPolicy: IfNotPresent
          command:
          - ./podinfo
          - --port=9898
          - --cert-path=/data/cert
          - --port-metrics=9797
          - --grpc-port=9999
          - --grpc-service-name=podinfo
          - --cache-server=tcp://podinfo-redis:6379
          - --level=info
          - --random-delay=false
          - --random-error=false
          env:
          - name: PODINFO_UI_COLOR
            value: "#34577c"
          ports:
          - name: http
            containerPort: 9898
            protocol: TCP
          - name: http-metrics
            containerPort: 9797
            protocol: TCP
          - name: grpc
            containerPort: 9999
            protocol: TCP
          livenessProbe:
            exec:
              command:
              - podcli
              - check
              - http
              - localhost:9898/healthz
            initialDelaySeconds: 1
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - podcli
              - check
              - http
              - localhost:9898/readyz
            initialDelaySeconds: 1
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
          volumeMounts:
          - name: data
            mountPath: /data
          resources:
            limits: null
            requests:
              cpu: 1m
              memory: 16Mi
        volumes:
        - name: data
          emptyDir: {}
  ---
  # Source: podinfo/templates/redis/deployment.yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: podinfo-redis
    labels:
      app: podinfo-redis
    annotations:
      config.kubernetes.io/index: '4'
      internal.config.kubernetes.io/index: '4'
  spec:
    strategy:
      type: Recreate
    selector:
      matchLabels:
        app: podinfo-redis
    template:
      metadata:
        labels:
          app: podinfo-redis
        annotations:
          checksum/config: "34c601c9d39797bbf53d1c7a278976609301f637ec11dc0253563729dfad4f8e"
      spec:
        containers:
        - name: redis
          image: "public.ecr.aws/docker/library/redis:7.0.6"
          imagePullPolicy: IfNotPresent
          command:
          - redis-server
          - "/redis-master/redis.conf"
          ports:
          - name: redis
            containerPort: 6379
            protocol: TCP
          livenessProbe:
            tcpSocket:
              port: redis
            initialDelaySeconds: 5
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping
            initialDelaySeconds: 5
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 1000m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 32Mi
          volumeMounts:
          - mountPath: /var/lib/redis
            name: data
          - mountPath: /redis-master
            name: config
        volumes:
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: podinfo-redis
            items:
            - key: redis.conf
              path: redis.conf
  ---
  # Source: podinfo/templates/ingress.yaml
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: podinfo
    labels:
      helm.sh/chart: podinfo-6.8.0
      app.kubernetes.io/name: podinfo
      app.kubernetes.io/version: "6.8.0"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '5'
      internal.config.kubernetes.io/index: '5'
  spec:
    ingressClassName: nginx
    rules:
    - host: "podinfo.local"
      http:
        paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: podinfo
              port:
                number: 9898
  
  
  '''
# ---
# name: test_build_hr[build-hr-single-cluster6]
  '''
  ---
  # Source: renovate/templates/serviceaccount.yaml
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: renovate
    labels:
      helm.sh/chart: renovate-37.64.3
      app.kubernetes.io/name: renovate
      app.kubernetes.io/instance: renovate
      app.kubernetes.io/version: "37.64.3"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
  ---
  # Source: renovate/templates/cronjob.yaml
  apiVersion: batch/v1
  kind: CronJob
  metadata:
    name: renovate
    labels:
      helm.sh/chart: renovate-37.64.3
      app.kubernetes.io/name: renovate
      app.kubernetes.io/instance: renovate
      app.kubernetes.io/version: "37.64.3"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  spec:
    schedule: "0 1 * * *"
    jobTemplate:
      metadata:
        labels:
          app.kubernetes.io/name: renovate
          app.kubernetes.io/instance: renovate
      spec:
        template:
          metadata:
            labels:
              app.kubernetes.io/name: renovate
              app.kubernetes.io/instance: renovate
          spec:
            serviceAccountName: renovate
            restartPolicy: Never
            containers:
            - name: renovate
              image: "ghcr.io/renovatebot/renovate:37.64.3"
              imagePullPolicy: IfNotPresent
              env:
              - name: RENOVATE_CONFIG_FILE
                value: /dev/null
              envFrom:
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
              resources:
                limits:
                  cpu: 1000m
                  memory: 2G
                requests:
                  cpu: 100m
                  memory: 256Mi
            volumes:
            securityContext:
              fsGroup: 1000
              fsGroupChangePolicy: Always
              runAsNonRoot: true
              runAsUser: 1000
              seccompProfile:
                type: RuntimeDefault
  
  
  '''
# ---
# name: test_build_hr[build-hr-single-cluster8]
  '''
  ---
  # Source: podinfo/templates/redis/config.yaml
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: podinfo-redis
    annotations:
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
  data:
    redis.conf: |
      maxmemory 64mb
      maxmemory-policy allkeys-lru
      save ""
      appendonly no
  ---
  # Source: podinfo/templates/redis/service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: podinfo-redis
    labels:
      app: podinfo-redis
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  spec:
    type: ClusterIP
    selector:
      app: podinfo-redis
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: redis
  ---
  # Source: podinfo/templates/service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: podinfo
    labels:
      helm.sh/chart: podinfo-6.5.4
      app.kubernetes.io/name: podinfo
      app.kubernetes.io/version: "6.5.4"
      app.kubernetes.io/managed-by: Helm
    annotations:
      app.kubernetes.io/name=[backend]: ..PLACEHOLDER_escape-special-chars-path..
      config.kubernetes.io/index: '2'
      internal.config.kubernetes.io/index: '2'
  spec:
    type: ClusterIP
    ports:
    - port: 9898
      targetPort: http
      protocol: TCP
      name: http
    - port: 9999
      targetPort: grpc
      protocol: TCP
      name: grpc
    selector:
      app.kubernetes.io/name: podinfo
  ---
  # Source: podinfo/templates/deployment.yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: podinfo
    labels:
      helm.sh/chart: podinfo-6.5.4
      app.kubernetes.io/name: podinfo
      app.kubernetes.io/version: "6.5.4"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '3'
      internal.config.kubernetes.io/index: '3'
  spec:
    replicas: 1
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: podinfo
    template:
      metadata:
        labels:
          app.kubernetes.io/name: podinfo
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9898"
      spec:
        terminationGracePeriodSeconds: 30
        containers:
        - name: podinfo
          image: "ghcr.io/stefanprodan/podinfo:6.5.4"
          imagePullPolicy: IfNotPresent
          command:
          - ./podinfo
          - --port=9898
          - --cert-path=/data/cert
          - --port-metrics=9797
          - --grpc-port=9999
          - --grpc-service-name=podinfo
          - --cache-server=tcp://podinfo-redis:6379
          - --level=info
          - --random-delay=false
          - --random-error=false
          env:
          - name: PODINFO_UI_COLOR
            value: "#34577c"
          ports:
          - name: http
            containerPort: 9898
            protocol: TCP
          - name: http-metrics
            containerPort: 9797
            protocol: TCP
          - name: grpc
            containerPort: 9999
            protocol: TCP
          livenessProbe:
            exec:
              command:
              - podcli
              - check
              - http
              - localhost:9898/healthz
            initialDelaySeconds: 1
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - podcli
              - check
              - http
              - localhost:9898/readyz
            initialDelaySeconds: 1
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
          volumeMounts:
          - name: data
            mountPath: /data
          resources:
            limits: null
            requests:
              cpu: 1m
              memory: 16Mi
        volumes:
        - name: data
          emptyDir: {}
  ---
  # Source: podinfo/templates/redis/deployment.yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: podinfo-redis
    labels:
      app: podinfo-redis
    annotations:
      config.kubernetes.io/index: '4'
      internal.config.kubernetes.io/index: '4'
  spec:
    strategy:
      type: Recreate
    selector:
      matchLabels:
        app: podinfo-redis
    template:
      metadata:
        labels:
          app: podinfo-redis
        annotations:
          checksum/config: "34c601c9d39797bbf53d1c7a278976609301f637ec11dc0253563729dfad4f8e"
      spec:
        containers:
        - name: redis
          image: "public.ecr.aws/docker/library/redis:7.0.6"
          imagePullPolicy: IfNotPresent
          command:
          - redis-server
          - "/redis-master/redis.conf"
          ports:
          - name: redis
            containerPort: 6379
            protocol: TCP
          livenessProbe:
            tcpSocket:
              port: redis
            initialDelaySeconds: 5
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping
            initialDelaySeconds: 5
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 1000m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 32Mi
          volumeMounts:
          - mountPath: /var/lib/redis
            name: data
          - mountPath: /redis-master
            name: config
        volumes:
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: podinfo-redis
            items:
            - key: redis.conf
              path: redis.conf
  ---
  # Source: podinfo/templates/ingress.yaml
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: podinfo
    labels:
      helm.sh/chart: podinfo-6.5.4
      app.kubernetes.io/name: podinfo
      app.kubernetes.io/version: "6.5.4"
      app.kubernetes.io/managed-by: Helm
    annotations:
      azure.workload.identity/client-id: ..PLACEHOLDER_dot-notated-target-path..
      config.kubernetes.io/index: '5'
      internal.config.kubernetes.io/index: '5'
  spec:
    ingressClassName: nginx
    rules:
    - host: "podinfo.production"
      http:
        paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: podinfo
              port:
                number: 9898
  
  
  '''
# ---
# name: test_build_hr[build-hr-single-cluster9]
  '''
  ---
  # Source: podinfo/templates/service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: podinfo
    labels:
      helm.sh/chart: podinfo-6.7.1
      app.kubernetes.io/name: podinfo
      app.kubernetes.io/version: "6.7.1"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
  spec:
    type: ClusterIP
    ports:
    - port: 9898
      targetPort: http
      protocol: TCP
      name: http
    - port: 9999
      targetPort: grpc
      protocol: TCP
      name: grpc
    selector:
      app.kubernetes.io/name: podinfo
  ---
  # Source: podinfo/templates/deployment.yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: podinfo
    labels:
      helm.sh/chart: podinfo-6.7.1
      app.kubernetes.io/name: podinfo
      app.kubernetes.io/version: "6.7.1"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  spec:
    replicas: 2
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: podinfo
    template:
      metadata:
        labels:
          app.kubernetes.io/name: podinfo
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9898"
      spec:
        terminationGracePeriodSeconds: 30
        containers:
        - name: podinfo
          image: "ghcr.io/stefanprodan/podinfo:6.7.1"
          imagePullPolicy: IfNotPresent
          command:
          - ./podinfo
          - --port=9898
          - --cert-path=/data/cert
          - --port-metrics=9797
          - --grpc-port=9999
          - --grpc-service-name=podinfo
          - --level=info
          - --random-delay=false
          - --random-error=false
          env:
          - name: PODINFO_UI_COLOR
            value: "#34577c"
          ports:
          - name: http
            containerPort: 9898
            protocol: TCP
          - name: http-metrics
            containerPort: 9797
            protocol: TCP
          - name: grpc
            containerPort: 9999
            protocol: TCP
          livenessProbe:
            exec:
              command:
              - podcli
              - check
              - http
              - localhost:9898/healthz
            initialDelaySeconds: 1
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - podcli
              - check
              - http
              - localhost:9898/readyz
            initialDelaySeconds: 1
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
          volumeMounts:
          - name: data
            mountPath: /data
          resources:
            limits: null
            requests:
              cpu: 1m
              memory: 16Mi
        volumes:
        - name: data
          emptyDir: {}
  
  
  '''
# ---
# name: test_build_hr[build-hr-single]
  '''
  ---
  # Source: weave-gitops/templates/network-policy.yaml
  apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-dashboard-ingress
    namespace: weave
    annotations:
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
  spec:
    podSelector:
      matchLabels:
        app.kubernetes.io/name: weave-gitops
        app.kubernetes.io/instance: weave-gitops
    ingress:
    - ports:
      - port: 9001
        protocol: TCP
    policyTypes:
    - Ingress
  ---
  # Source: weave-gitops/templates/network-policy.yaml
  apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-dashboard-egress
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  spec:
    podSelector:
      matchLabels:
        app.kubernetes.io/name: weave-gitops
        app.kubernetes.io/instance: weave-gitops
    egress:
    - {}
    policyTypes:
    - Egress
  ---
  # Source: weave-gitops/templates/serviceaccount.yaml
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: weave-gitops
    namespace: weave
    labels:
      helm.sh/chart: weave-gitops-4.0.36
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
      app.kubernetes.io/version: "v0.38.0"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '2'
      internal.config.kubernetes.io/index: '2'
  ---
  # Source: weave-gitops/templates/role.yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: weave-gitops
    annotations:
      config.kubernetes.io/index: '3'
      internal.config.kubernetes.io/index: '3'
  rules:
  # impersonation rules for ui calls
  - apiGroups: [""]
    resources: ["users", "groups"]
    verbs: ["impersonate"]
  # Access to enterprise entitlement
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
    # or should return the first non-falsy result
    resourceNames: ["cluster-user-auth", "oidc-auth"]
  # The service account needs to read namespaces to know where it can query
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
  # The service account needs to list custom resources to query if given feature
  # is available or not.
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["list"]
  ---
  # Source: weave-gitops/templates/rolebinding.yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: weave-gitops
    labels:
      helm.sh/chart: weave-gitops-4.0.36
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
      app.kubernetes.io/version: "v0.38.0"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '4'
      internal.config.kubernetes.io/index: '4'
  subjects:
  - kind: ServiceAccount
    name: weave-gitops
    namespace: weave
  roleRef:
    kind: ClusterRole
    name: weave-gitops
    apiGroup: rbac.authorization.k8s.io
  ---
  # Source: weave-gitops/templates/service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: weave-gitops
    namespace: weave
    labels:
      helm.sh/chart: weave-gitops-4.0.36
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
      app.kubernetes.io/version: "v0.38.0"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '5'
      internal.config.kubernetes.io/index: '5'
  spec:
    type: ClusterIP
    ports:
    - port: 9001
      targetPort: http
      protocol: TCP
      name: http
    selector:
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
  ---
  # Source: weave-gitops/templates/deployment.yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: weave-gitops
    namespace: weave
    labels:
      helm.sh/chart: weave-gitops-4.0.36
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
      app.kubernetes.io/version: "v0.38.0"
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: weave-gitops
      weave.works/app: weave-gitops-oss
    annotations:
      config.kubernetes.io/index: '6'
      internal.config.kubernetes.io/index: '6'
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: weave-gitops
        app.kubernetes.io/instance: weave-gitops
    template:
      metadata:
        labels:
          app.kubernetes.io/name: weave-gitops
          app.kubernetes.io/instance: weave-gitops
          app.kubernetes.io/part-of: weave-gitops
          weave.works/app: weave-gitops-oss
      spec:
        serviceAccountName: weave-gitops
        containers:
        - name: weave-gitops
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "ghcr.io/weaveworks/wego-app:v0.38.0"
          imagePullPolicy: IfNotPresent
          args:
          - "--log-level"
          - "info"
          - "--insecure"
          ports:
          - name: http
            containerPort: 9001
            protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
          - name: WEAVE_GITOPS_FEATURE_TENANCY
            value: "true"
          - name: WEAVE_GITOPS_FEATURE_CLUSTER
            value: "false"
          - name: WEAVE_GITOPS_FEATURE_GITOPS_RUNTIME
            value: "false"
          resources: {}
  
  
  '''
# ---
# name: test_build_hr[build-hr]
  '''
  ---
  # Source: weave-gitops/templates/network-policy.yaml
  apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-dashboard-ingress
    namespace: weave
    annotations:
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
  spec:
    podSelector:
      matchLabels:
        app.kubernetes.io/name: weave-gitops
        app.kubernetes.io/instance: weave-gitops
    ingress:
    - ports:
      - port: 9001
        protocol: TCP
    policyTypes:
    - Ingress
  ---
  # Source: weave-gitops/templates/network-policy.yaml
  apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-dashboard-egress
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  spec:
    podSelector:
      matchLabels:
        app.kubernetes.io/name: weave-gitops
        app.kubernetes.io/instance: weave-gitops
    egress:
    - {}
    policyTypes:
    - Egress
  ---
  # Source: weave-gitops/templates/serviceaccount.yaml
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: weave-gitops
    namespace: weave
    labels:
      helm.sh/chart: weave-gitops-4.0.36
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
      app.kubernetes.io/version: "v0.38.0"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '2'
      internal.config.kubernetes.io/index: '2'
  ---
  # Source: weave-gitops/templates/role.yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: weave-gitops
    annotations:
      config.kubernetes.io/index: '3'
      internal.config.kubernetes.io/index: '3'
  rules:
  # impersonation rules for ui calls
  - apiGroups: [""]
    resources: ["users", "groups"]
    verbs: ["impersonate"]
  # Access to enterprise entitlement
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
    # or should return the first non-falsy result
    resourceNames: ["cluster-user-auth", "oidc-auth"]
  # The service account needs to read namespaces to know where it can query
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
  # The service account needs to list custom resources to query if given feature
  # is available or not.
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["list"]
  ---
  # Source: weave-gitops/templates/rolebinding.yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: weave-gitops
    labels:
      helm.sh/chart: weave-gitops-4.0.36
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
      app.kubernetes.io/version: "v0.38.0"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '4'
      internal.config.kubernetes.io/index: '4'
  subjects:
  - kind: ServiceAccount
    name: weave-gitops
    namespace: weave
  roleRef:
    kind: ClusterRole
    name: weave-gitops
    apiGroup: rbac.authorization.k8s.io
  ---
  # Source: weave-gitops/templates/service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: weave-gitops
    namespace: weave
    labels:
      helm.sh/chart: weave-gitops-4.0.36
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
      app.kubernetes.io/version: "v0.38.0"
      app.kubernetes.io/managed-by: Helm
    annotations:
      config.kubernetes.io/index: '5'
      internal.config.kubernetes.io/index: '5'
  spec:
    type: ClusterIP
    ports:
    - port: 9001
      targetPort: http
      protocol: TCP
      name: http
    selector:
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
  ---
  # Source: weave-gitops/templates/deployment.yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: weave-gitops
    namespace: weave
    labels:
      helm.sh/chart: weave-gitops-4.0.36
      app.kubernetes.io/name: weave-gitops
      app.kubernetes.io/instance: weave-gitops
      app.kubernetes.io/version: "v0.38.0"
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: weave-gitops
      weave.works/app: weave-gitops-oss
    annotations:
      config.kubernetes.io/index: '6'
      internal.config.kubernetes.io/index: '6'
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: weave-gitops
        app.kubernetes.io/instance: weave-gitops
    template:
      metadata:
        labels:
          app.kubernetes.io/name: weave-gitops
          app.kubernetes.io/instance: weave-gitops
          app.kubernetes.io/part-of: weave-gitops
          weave.works/app: weave-gitops-oss
      spec:
        serviceAccountName: weave-gitops
        containers:
        - name: weave-gitops
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "ghcr.io/weaveworks/wego-app:v0.38.0"
          imagePullPolicy: IfNotPresent
          args:
          - "--log-level"
          - "info"
          - "--insecure"
          ports:
          - name: http
            containerPort: 9001
            protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
          - name: WEAVE_GITOPS_FEATURE_TENANCY
            value: "true"
          - name: WEAVE_GITOPS_FEATURE_CLUSTER
            value: "false"
          - name: WEAVE_GITOPS_FEATURE_GITOPS_RUNTIME
            value: "false"
          resources: {}
  
  
  '''
# ---
