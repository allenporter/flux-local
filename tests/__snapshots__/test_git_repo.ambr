# serializer version: 1
# name: test_build_manifest
  dict({
    'clusters': list([
      dict({
        'kustomizations': list([
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'podinfo',
                  'repo_name': 'podinfo',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'podinfo',
                'namespace': 'podinfo',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'apps',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/apps/prod',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
            ]),
            'name': 'flux-system',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/clusters/prod',
          }),
          dict({
            'cluster_policies': list([
              dict({
                'name': 'test-allow-policy',
                'namespace': None,
              }),
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
              dict({
                'name': 'bitnami',
                'namespace': 'flux-system',
                'repo_type': 'default',
                'url': 'https://charts.bitnami.com/bitnami',
              }),
              dict({
                'name': 'podinfo',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/stefanprodan/charts',
              }),
              dict({
                'name': 'weave-charts',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/weaveworks/charts',
              }),
            ]),
            'name': 'infra-configs',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/configs',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'weave-gitops',
                  'repo_name': 'weave-charts',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'weave-gitops',
                'namespace': 'flux-system',
              }),
              dict({
                'chart': dict({
                  'name': 'metallb',
                  'repo_name': 'bitnami',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'metallb',
                'namespace': 'metallb',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'infra-controllers',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/controllers',
          }),
        ]),
        'name': 'flux-system',
        'namespace': 'flux-system',
        'path': './tests/testdata/cluster/clusters/prod',
      }),
    ]),
  })
# ---
# name: test_cluster_selector_disabled
  dict({
    'clusters': list([
    ]),
  })
# ---
# name: test_helm_release_selector_disabled
  dict({
    'clusters': list([
      dict({
        'kustomizations': list([
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
            ]),
            'name': 'apps',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/apps/prod',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
            ]),
            'name': 'flux-system',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/clusters/prod',
          }),
          dict({
            'cluster_policies': list([
              dict({
                'name': 'test-allow-policy',
                'namespace': None,
              }),
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
              dict({
                'name': 'bitnami',
                'namespace': 'flux-system',
                'repo_type': 'default',
                'url': 'https://charts.bitnami.com/bitnami',
              }),
              dict({
                'name': 'podinfo',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/stefanprodan/charts',
              }),
              dict({
                'name': 'weave-charts',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/weaveworks/charts',
              }),
            ]),
            'name': 'infra-configs',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/configs',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
            ]),
            'name': 'infra-controllers',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/controllers',
          }),
        ]),
        'name': 'flux-system',
        'namespace': 'flux-system',
        'path': './tests/testdata/cluster/clusters/prod',
      }),
    ]),
  })
# ---
# name: test_helm_release_visitor
  dict({
    'clusters': list([
      dict({
        'kustomizations': list([
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'podinfo',
                  'repo_name': 'podinfo',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'podinfo',
                'namespace': 'podinfo',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'apps',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/apps/prod',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
            ]),
            'name': 'flux-system',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/clusters/prod',
          }),
          dict({
            'cluster_policies': list([
              dict({
                'name': 'test-allow-policy',
                'namespace': None,
              }),
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
              dict({
                'name': 'bitnami',
                'namespace': 'flux-system',
                'repo_type': 'default',
                'url': 'https://charts.bitnami.com/bitnami',
              }),
              dict({
                'name': 'podinfo',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/stefanprodan/charts',
              }),
              dict({
                'name': 'weave-charts',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/weaveworks/charts',
              }),
            ]),
            'name': 'infra-configs',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/configs',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'weave-gitops',
                  'repo_name': 'weave-charts',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'weave-gitops',
                'namespace': 'flux-system',
              }),
              dict({
                'chart': dict({
                  'name': 'metallb',
                  'repo_name': 'bitnami',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'metallb',
                'namespace': 'metallb',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'infra-controllers',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/controllers',
          }),
        ]),
        'name': 'flux-system',
        'namespace': 'flux-system',
        'path': './tests/testdata/cluster/clusters/prod',
      }),
    ]),
  })
# ---
# name: test_helm_release_visitor.1
  list([
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/apps/prod',
      'podinfo',
      'podinfo',
    ),
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/infrastructure/controllers',
      'flux-system',
      'weave-gitops',
    ),
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/infrastructure/controllers',
      'metallb',
      'metallb',
    ),
  ])
# ---
# name: test_helm_repo_selector_disabled
  dict({
    'clusters': list([
      dict({
        'kustomizations': list([
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'podinfo',
                  'repo_name': 'podinfo',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'podinfo',
                'namespace': 'podinfo',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'apps',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/apps/prod',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
            ]),
            'name': 'flux-system',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/clusters/prod',
          }),
          dict({
            'cluster_policies': list([
              dict({
                'name': 'test-allow-policy',
                'namespace': None,
              }),
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
            ]),
            'name': 'infra-configs',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/configs',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'weave-gitops',
                  'repo_name': 'weave-charts',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'weave-gitops',
                'namespace': 'flux-system',
              }),
              dict({
                'chart': dict({
                  'name': 'metallb',
                  'repo_name': 'bitnami',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'metallb',
                'namespace': 'metallb',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'infra-controllers',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/controllers',
          }),
        ]),
        'name': 'flux-system',
        'namespace': 'flux-system',
        'path': './tests/testdata/cluster/clusters/prod',
      }),
    ]),
  })
# ---
# name: test_helm_repo_visitor
  dict({
    'clusters': list([
      dict({
        'kustomizations': list([
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'podinfo',
                  'repo_name': 'podinfo',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'podinfo',
                'namespace': 'podinfo',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'apps',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/apps/prod',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
            ]),
            'name': 'flux-system',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/clusters/prod',
          }),
          dict({
            'cluster_policies': list([
              dict({
                'name': 'test-allow-policy',
                'namespace': None,
              }),
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
              dict({
                'name': 'bitnami',
                'namespace': 'flux-system',
                'repo_type': 'default',
                'url': 'https://charts.bitnami.com/bitnami',
              }),
              dict({
                'name': 'podinfo',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/stefanprodan/charts',
              }),
              dict({
                'name': 'weave-charts',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/weaveworks/charts',
              }),
            ]),
            'name': 'infra-configs',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/configs',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'weave-gitops',
                  'repo_name': 'weave-charts',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'weave-gitops',
                'namespace': 'flux-system',
              }),
              dict({
                'chart': dict({
                  'name': 'metallb',
                  'repo_name': 'bitnami',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'metallb',
                'namespace': 'metallb',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'infra-controllers',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/controllers',
          }),
        ]),
        'name': 'flux-system',
        'namespace': 'flux-system',
        'path': './tests/testdata/cluster/clusters/prod',
      }),
    ]),
  })
# ---
# name: test_helm_repo_visitor.1
  list([
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/infrastructure/configs',
      'flux-system',
      'bitnami',
    ),
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/infrastructure/configs',
      'flux-system',
      'podinfo',
    ),
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/infrastructure/configs',
      'flux-system',
      'weave-charts',
    ),
  ])
# ---
# name: test_internal_commands[cluster2]
  dict({
    "Traversing Cluster 'tests/testdata/cluster2'": dict({
      "Build Kustomization 'flux-system/cluster'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster2/flux (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster2/flux/config (abs)',
          'kustomize build tests/testdata/cluster2/flux/repositories (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/cluster-apps'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster2/apps (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster2/apps/monitoring (abs)',
          'kustomize build tests/testdata/cluster2/apps/networking (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/cluster-apps-ingress-nginx'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster2/apps/networking/ingress-nginx/app (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/cluster-apps-ingress-nginx-certificates'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster2/apps/networking/ingress-nginx/certificates (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/cluster-apps-kubernetes-dashboard'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster2/apps/monitoring/kubernetes-dashboard/app (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster2'": dict({
        'cmds': list([
          '(tests/testdata/cluster2 (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster2/apps'": dict({
        'cmds': list([
          '(tests/testdata/cluster2/apps (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster2/apps/monitoring/kubernetes-dashboard/app'": dict({
        'cmds': list([
          '(tests/testdata/cluster2/apps/monitoring/kubernetes-dashboard/app (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster2/apps/networking/ingress-nginx/app'": dict({
        'cmds': list([
          '(tests/testdata/cluster2/apps/networking/ingress-nginx/app (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster2/apps/networking/ingress-nginx/certificates'": dict({
        'cmds': list([
          '(tests/testdata/cluster2/apps/networking/ingress-nginx/certificates (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster2/flux'": dict({
        'cmds': list([
          '(tests/testdata/cluster2/flux (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      'cmds': list([
        '(tests/testdata/cluster2 (abs)) kustomize cfg grep kind=Kustomization .',
        "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
      ]),
    }),
  })
# ---
# name: test_internal_commands[cluster3]
  dict({
    "Traversing Cluster 'tests/testdata/cluster3'": dict({
      "Build Kustomization 'flux-system/namespaces'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster3/namespaces/overlays/cluster3 (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/tenants'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster3/tenants/overlays/cluster3 (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster3'": dict({
        'cmds': list([
          '(tests/testdata/cluster3 (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster3/namespaces/overlays/cluster3'": dict({
        'cmds': list([
          '(tests/testdata/cluster3/namespaces/overlays/cluster3 (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster3/tenants/overlays/cluster3'": dict({
        'cmds': list([
          '(tests/testdata/cluster3/tenants/overlays/cluster3 (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      'cmds': list([
        '(tests/testdata/cluster3 (abs)) kustomize cfg grep kind=Kustomization .',
        "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
      ]),
    }),
  })
# ---
# name: test_internal_commands[cluster4]
  dict({
    "Traversing Cluster 'tests/testdata/cluster4'": dict({
      "Build Kustomization 'flux-system/cluster'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster4/flux (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster4/flux/config (abs)',
          'kustomize build tests/testdata/cluster4/flux/repositories (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/cluster-apps'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster4/apps (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster4/apps/monitoring (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/cluster-apps-kubernetes-dashboard'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster4/apps/monitoring/kubernetes-dashboard (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster4'": dict({
        'cmds': list([
          '(tests/testdata/cluster4 (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster4/apps'": dict({
        'cmds': list([
          '(tests/testdata/cluster4/apps (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster4/apps/monitoring/kubernetes-dashboard'": dict({
        'cmds': list([
          '(tests/testdata/cluster4/apps/monitoring/kubernetes-dashboard (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster4/flux'": dict({
        'cmds': list([
          '(tests/testdata/cluster4/flux (abs)) kustomize cfg grep kind=Kustomization .',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      'cmds': list([
        '(tests/testdata/cluster4 (abs)) kustomize cfg grep kind=Kustomization .',
        "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
      ]),
    }),
  })
# ---
# name: test_internal_commands[cluster5]
  dict({
    "Traversing Cluster 'tests/testdata/cluster5'": dict({
      "Build Kustomization 'flux-system/flux-system'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster5/clusters/prod (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster5/clusters/prod/flux-system (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster5'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster5 (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster5/clusters/prod'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster5/clusters/prod (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
          'kustomize build tests/testdata/cluster5/clusters/prod/flux-system (abs)',
        ]),
      }),
      'cmds': list([
        '(tests/testdata/cluster5 (abs)) kustomize cfg grep kind=Kustomization .',
        "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
      ]),
    }),
  })
# ---
# name: test_internal_commands[cluster6]
  dict({
    "Traversing Cluster 'tests/testdata/cluster6'": dict({
      "Build Kustomization 'flux-system/apps'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster6/apps (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster6/apps/renovate (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/flux-system'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster6/cluster (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster6/cluster/flux-system (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster6/apps'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster6/apps (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
          'kustomize build tests/testdata/cluster6/apps/renovate (abs)',
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster6/cluster'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster6/cluster (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
          'kustomize build tests/testdata/cluster6/cluster/flux-system (abs)',
        ]),
      }),
      'cmds': list([
        '(tests/testdata/cluster6 (abs)) kustomize cfg grep kind=Kustomization .',
        "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
      ]),
    }),
  })
# ---
# name: test_internal_commands[cluster7]
  dict({
    "Traversing Cluster 'tests/testdata/cluster7'": dict({
      "Build Kustomization 'flux-system/apps'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster7/flux/apps (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster7/flux/apps/database (abs)',
          'kustomize build tests/testdata/cluster7/flux/apps/database/postgresql (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/charts'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster7/flux/charts (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/flux-system'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster7/clusters/home (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster7/clusters/home/flux-system (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster7/clusters/home'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster7/clusters/home (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
          'kustomize build tests/testdata/cluster7/clusters/home/flux-system (abs)',
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster7/flux/apps'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster7/flux/apps (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
          'kustomize build tests/testdata/cluster7/flux/apps/database (abs)',
          'kustomize build tests/testdata/cluster7/flux/apps/database/postgresql (abs)',
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster7/flux/charts'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster7/flux/charts (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      'cmds': list([
        '(tests/testdata/cluster7 (abs)) kustomize cfg grep kind=Kustomization .',
        "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
      ]),
    }),
  })
# ---
# name: test_internal_commands[cluster]
  dict({
    "Traversing Cluster 'tests/testdata/cluster'": dict({
      "Build Kustomization 'flux-system/apps'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster/apps/prod (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/flux-system'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster/clusters/prod (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          'kustomize build tests/testdata/cluster/clusters/prod/flux-system (abs)',
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/infra-configs'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster/infrastructure/configs (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Build Kustomization 'flux-system/infra-controllers'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster/infrastructure/controllers (abs)',
          "kustomize cfg grep 'kind=^(CustomResourceDefinition|Secret)$' --invert-match",
          "kustomize cfg grep 'kind=^(HelmRepository|HelmRelease|ClusterPolicy)$'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster/apps/prod'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster/apps/prod (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster/clusters/prod'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster/clusters/prod (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
          'kustomize build tests/testdata/cluster/clusters/prod/flux-system (abs)',
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster/infrastructure/configs'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster/infrastructure/configs (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      "Traversing Kustomization 'tests/testdata/cluster/infrastructure/controllers'": dict({
        'cmds': list([
          'kustomize build tests/testdata/cluster/infrastructure/controllers (abs)',
          'kustomize cfg grep kind=Kustomization',
          "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
        ]),
      }),
      'cmds': list([
        '(tests/testdata/cluster (abs)) kustomize cfg grep kind=Kustomization .',
        "kustomize cfg grep 'spec.sourceRef.kind=GitRepository|OCIRepository'",
      ]),
    }),
  })
# ---
# name: test_kustomization_selector_disabled
  dict({
    'clusters': list([
      dict({
        'kustomizations': list([
        ]),
        'name': 'flux-system',
        'namespace': 'flux-system',
        'path': './tests/testdata/cluster/clusters/prod',
      }),
    ]),
  })
# ---
# name: test_kustomization_visitor
  dict({
    'clusters': list([
      dict({
        'kustomizations': list([
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'podinfo',
                  'repo_name': 'podinfo',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'podinfo',
                'namespace': 'podinfo',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'apps',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/apps/prod',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
            ]),
            'name': 'flux-system',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/clusters/prod',
          }),
          dict({
            'cluster_policies': list([
              dict({
                'name': 'test-allow-policy',
                'namespace': None,
              }),
            ]),
            'helm_releases': list([
            ]),
            'helm_repos': list([
              dict({
                'name': 'bitnami',
                'namespace': 'flux-system',
                'repo_type': 'default',
                'url': 'https://charts.bitnami.com/bitnami',
              }),
              dict({
                'name': 'podinfo',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/stefanprodan/charts',
              }),
              dict({
                'name': 'weave-charts',
                'namespace': 'flux-system',
                'repo_type': 'oci',
                'url': 'oci://ghcr.io/weaveworks/charts',
              }),
            ]),
            'name': 'infra-configs',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/configs',
          }),
          dict({
            'cluster_policies': list([
            ]),
            'helm_releases': list([
              dict({
                'chart': dict({
                  'name': 'weave-gitops',
                  'repo_name': 'weave-charts',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'weave-gitops',
                'namespace': 'flux-system',
              }),
              dict({
                'chart': dict({
                  'name': 'metallb',
                  'repo_name': 'bitnami',
                  'repo_namespace': 'flux-system',
                }),
                'name': 'metallb',
                'namespace': 'metallb',
              }),
            ]),
            'helm_repos': list([
            ]),
            'name': 'infra-controllers',
            'namespace': 'flux-system',
            'path': 'tests/testdata/cluster/infrastructure/controllers',
          }),
        ]),
        'name': 'flux-system',
        'namespace': 'flux-system',
        'path': './tests/testdata/cluster/clusters/prod',
      }),
    ]),
  })
# ---
# name: test_kustomization_visitor.1
  list([
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/apps/prod',
      'flux-system',
      'apps',
    ),
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/clusters/prod',
      'flux-system',
      'flux-system',
    ),
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/infrastructure/configs',
      'flux-system',
      'infra-configs',
    ),
    tuple(
      'tests/testdata/cluster/clusters/prod',
      'tests/testdata/cluster/infrastructure/controllers',
      'flux-system',
      'infra-controllers',
    ),
  ])
# ---
# name: test_kustomization_visitor.2
  '''
  apiVersion: helm.toolkit.fluxcd.io/v2beta1
  kind: HelmRelease
  metadata:
    name: weave-gitops
    namespace: flux-system
    annotations:
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
  spec:
    chart:
      spec:
        chart: weave-gitops
        interval: 12h
        sourceRef:
          kind: HelmRepository
          name: weave-charts
        version: 4.0.22
    interval: 60m
  ---
  apiVersion: helm.toolkit.fluxcd.io/v2beta1
  kind: HelmRelease
  metadata:
    name: metallb
    namespace: metallb
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  spec:
    chart:
      spec:
        chart: metallb
        reconcileStrategy: ChartVersion
        sourceRef:
          kind: HelmRepository
          name: bitnami
          namespace: flux-system
        version: 4.1.14
    install:
      crds: CreateReplace
      remediation:
        retries: 3
    interval: 5m
    releaseName: metallb
    upgrade:
      crds: CreateReplace
    values:
      speaker:
        secretName: metallb-secret
  apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      policies.kyverno.io/description: Policy that is expected to allow resources under test through since no resources should have this annotation.
      policies.kyverno.io/title: Test Allow Policy
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
    name: test-allow-policy
  spec:
    background: true
    rules:
    - match:
        resources:
          kinds:
          - ConfigMap
      name: forbid-test-annotation
      validate:
        message: Found test-annotation
        pattern:
          metadata:
            =(annotations):
              X(flux-local/test-annotation): "null"
    validationFailureAction: audit
  ---
  apiVersion: source.toolkit.fluxcd.io/v1beta2
  kind: HelmRepository
  metadata:
    name: bitnami
    namespace: flux-system
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  spec:
    interval: 30m
    provider: generic
    timeout: 1m0s
    url: https://charts.bitnami.com/bitnami
  ---
  apiVersion: source.toolkit.fluxcd.io/v1beta2
  kind: HelmRepository
  metadata:
    name: podinfo
    namespace: flux-system
    annotations:
      config.kubernetes.io/index: '2'
      internal.config.kubernetes.io/index: '2'
  spec:
    interval: 5m
    type: oci
    url: oci://ghcr.io/stefanprodan/charts
  ---
  apiVersion: source.toolkit.fluxcd.io/v1beta2
  kind: HelmRepository
  metadata:
    name: weave-charts
    namespace: flux-system
    annotations:
      config.kubernetes.io/index: '3'
      internal.config.kubernetes.io/index: '3'
  spec:
    interval: 120m
    type: oci
    url: oci://ghcr.io/weaveworks/charts
  apiVersion: v1
  kind: Namespace
  metadata:
    name: podinfo
    annotations:
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
  ---
  apiVersion: v1
  data:
    foo: bar
  kind: ConfigMap
  metadata:
    name: podinfo-config
    namespace: podinfo
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  ---
  apiVersion: helm.toolkit.fluxcd.io/v2beta1
  kind: HelmRelease
  metadata:
    name: podinfo
    namespace: podinfo
    annotations:
      config.kubernetes.io/index: '2'
      internal.config.kubernetes.io/index: '2'
  spec:
    chart:
      spec:
        chart: podinfo
        sourceRef:
          kind: HelmRepository
          name: podinfo
          namespace: flux-system
        version: 6.3.2
    install:
      remediation:
        retries: 3
    interval: 50m
    releaseName: podinfo
    values:
      ingress:
        className: nginx
        enabled: true
        hosts:
        - host: podinfo.production
          paths:
          - path: /
            pathType: ImplementationSpecific
      redis:
        enabled: true
        repository: public.ecr.aws/docker/library/redis
        tag: 7.0.6
  apiVersion: kustomize.toolkit.fluxcd.io/v1
  kind: Kustomization
  metadata:
    name: apps
    namespace: flux-system
    annotations:
      config.kubernetes.io/index: '0'
      internal.config.kubernetes.io/index: '0'
  spec:
    interval: 10m0s
    dependsOn:
    - name: infra-configs
    sourceRef:
      kind: GitRepository
      name: flux-system
    path: ./tests/testdata/cluster/apps/prod
    prune: true
    wait: true
    timeout: 5m0s
  ---
  apiVersion: kustomize.toolkit.fluxcd.io/v1
  kind: Kustomization
  metadata:
    name: flux-system
    namespace: flux-system
    annotations:
      config.kubernetes.io/index: '1'
      internal.config.kubernetes.io/index: '1'
  spec:
    interval: 10m0s
    path: ./tests/testdata/cluster/clusters/prod
    prune: true
    sourceRef:
      kind: GitRepository
      name: flux-system
  ---
  apiVersion: source.toolkit.fluxcd.io/v1
  kind: GitRepository
  metadata:
    name: flux-system
    namespace: flux-system
    annotations:
      config.kubernetes.io/index: '2'
      internal.config.kubernetes.io/index: '2'
  spec:
    interval: 1m0s
    ref:
      branch: main
    secretRef:
      name: flux-system
    url: ssh://git@github.com/allenporter/flux-local
  ---
  apiVersion: kustomize.toolkit.fluxcd.io/v1
  kind: Kustomization
  metadata:
    name: infra-controllers
    namespace: flux-system
    annotations:
      config.kubernetes.io/index: '3'
      internal.config.kubernetes.io/index: '3'
  spec:
    interval: 1h
    retryInterval: 1m
    timeout: 5m
    sourceRef:
      kind: GitRepository
      name: flux-system
    path: ./tests/testdata/cluster/infrastructure/controllers
    prune: true
    wait: true
  ---
  apiVersion: kustomize.toolkit.fluxcd.io/v1
  kind: Kustomization
  metadata:
    name: infra-configs
    namespace: flux-system
    annotations:
      config.kubernetes.io/index: '4'
      internal.config.kubernetes.io/index: '4'
  spec:
    dependsOn:
    - name: infra-controllers
    interval: 1h
    retryInterval: 1m
    timeout: 5m
    sourceRef:
      kind: GitRepository
      name: flux-system
    path: ./tests/testdata/cluster/infrastructure/configs
    prune: true
  
  '''
# ---
